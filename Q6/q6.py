# -*- coding: utf-8 -*-
"""Q6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Np4zuGvDe4F_F-PMQJmpKWDc4LWqM1_Y
"""

from queue import PriorityQueue

# Adding distances between cities
distances = {
    ("Oradea", "Zerind"): 71,
    ("Oradea", "Sibiu"): 151,
    ("Zerind", "Arad"): 75,
    ("Arad", "Sibiu"): 140,
    ("Arad", "Timisoara"): 118,
    ("Timisoara", "Lugoj"): 111,
    ("Lugoj", "Mehadia"): 70,
    ("Mehadia", "Drobeta"): 75,
    ("Drobeta", "Craiova"): 120,
    ("Craiova", "Rimnicu Vilcea"): 146,
    ("Craiova", "Pitesti"): 138,
    ("Rimnicu Vilcea", "Sibiu"): 80,
    ("Sibiu", "Fagaras"): 99,
    ("Fagaras", "Bucharest"): 211,
    ("Pitesti", "Bucharest"): 101,
    ("Bucharest", "Giurgiu"): 90,
    ("Bucharest", "Urziceni"): 85,
    ("Urziceni", "Hirsova"): 98,
    ("Hirsova", "Eforie"): 86,
    ("Urziceni", "Vaslui"): 142,
    ("Vaslui", "Iasi"): 92,
    ("Iasi", "Neamt"): 87
}

# Adding heuristic values
heuristics = {
    "Arad": 366,
    "Bucharest": 0,
    "Craiova": 160,
    "Drobeta": 242,
    "Fagaras": 176,
    "Giurgiu": 77,
    "Hirsova": 151,
    "Iasi": 226,
    "Lugoj": 244,
    "Mehadia": 241,
    "Neamt": 234,
    "Oradea": 380,
    "Pitesti": 100,
    "Rimnicu Vilcea": 193,
    "Sibiu": 253,
    "Timisoara": 329,
    "Urziceni": 80,
    "Vaslui": 199,
    "Zerind": 374
}

# Bucharest is the goal state as done in class
goal = "Bucharest"

# Uninformed Search BFS Code:
def bfs(start, goal):
    frontier = [(start, [start], 0)]
    explored = set()

    while frontier:
        current_city, path, cost = frontier.pop(0)
        if current_city == goal:
            return path, cost
        explored.add(current_city)
        for city in distances:
            if city[0] == current_city and city[1] not in explored:
                new_path = path + [city[1]]
                new_cost = cost + distances[city]
                frontier.append((city[1], new_path, new_cost))
    return [], -1

# Informed Search A* Code:
def astar(start, goal):
    frontier = PriorityQueue()
    frontier.put((0, start, [start]))
    came_from = {}
    cost_so_far = {start: 0}

    while not frontier.empty():
        current_cost, current_city, path = frontier.get()

        if current_city == goal:
            return path, cost_so_far[current_city]

        for city in distances:
            if city[0] == current_city:
                next_city = city[1]
                new_cost = cost_so_far[current_city] + distances[city]
                if next_city not in cost_so_far or new_cost < cost_so_far[next_city]:
                    cost_so_far[next_city] = new_cost
                    priority = new_cost + heuristics[next_city]
                    new_path = path + [next_city]
                    frontier.put((priority, next_city, new_path))
                    came_from[next_city] = current_city

    return [], -1

# Test the algorithms
start_city = "Arad"
bfs_path, bfs_cost = bfs(start_city, goal)
astar_path, astar_cost = astar(start_city, goal)

print("BFS Path Found:", bfs_path)
print("BFS Cost:", bfs_cost)
print("A* Path Found:", astar_path)
print("A* Cost:", astar_cost)